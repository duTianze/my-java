@startuml
class OrcKing {
+ String getDescription()
}
interface KingdomFactory {
~ Castle createCastle()
~ King createKing()
~ Army createArmy()
~ Kingdom createKingdom()
~ {static} KingdomFactory makeFactory(KingdomType)
}
enum KingdomType {
+  ELF
+  ORC
}
class ElfArmy {
+ String getDescription()
}
class OrcKingdomFactory {
+ Castle createCastle()
+ King createKing()
+ Army createArmy()
}
interface King {
~ String getDescription()
}
class ElfCastle {
+ String getDescription()
}
interface Castle {
~ String getDescription()
}
class ElfKingdomFactory {
+ Castle createCastle()
+ King createKing()
+ Army createArmy()
}
class Kingdom {
- King king
- Castle castle
- Army army
}
class ElfKing {
+ String getDescription()
}
interface Army {
~ String getDescription()
}
class OrcArmy {
+ String getDescription()
}
class OrcCastle {
+ String getDescription()
}


KingdomType ..+ FactoryMaker
App -->  "-castle" Castle
FactoryMaker ..+ App
App -->  "-king" King
App -->  "-army" Army
ElfArmy ..|> Army
ElfCastle ..|> Castle
ElfKing ..|> King
ElfKingdomFactory ..|> KingdomFactory
OrcArmy ..|> Army
OrcCastle ..|> Castle
OrcKing ..|> King
OrcKingdomFactory ..|> KingdomFactory
@enduml